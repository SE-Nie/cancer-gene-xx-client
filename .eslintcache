[{"C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\index.js":"1","C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Helpers\\session.js":"2","C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\App.js":"3","C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\reportWebVitals.js":"4","C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Components\\EnsgSearch.js":"5","C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Components\\Profile.js":"6","C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Components\\ProfileManager.js":"7","C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Components\\GdcProjectChoice.js":"8","C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Components\\LoginForm.js":"9","C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Components\\RegisterForm.js":"10","C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Components\\GdcCategoryChoice.js":"11","C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Components\\GdcDataTypeChoice.js":"12","C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Components\\GdcWorkflowChoice.js":"13","C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Components\\DataFetch.js":"14","C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Components\\DataDownload.js":"15","C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Helpers\\search.js":"16"},{"size":848,"mtime":1610471247491,"results":"17","hashOfConfig":"18"},{"size":843,"mtime":1610360456982,"results":"19","hashOfConfig":"18"},{"size":876,"mtime":1610438310242,"results":"20","hashOfConfig":"18"},{"size":375,"mtime":1609836535577,"results":"21","hashOfConfig":"18"},{"size":2158,"mtime":1610472446618,"results":"22","hashOfConfig":"18"},{"size":1188,"mtime":1610360456975,"results":"23","hashOfConfig":"18"},{"size":3140,"mtime":1610360456978,"results":"24","hashOfConfig":"18"},{"size":3041,"mtime":1610468745273,"results":"25","hashOfConfig":"18"},{"size":1880,"mtime":1610360456973,"results":"26","hashOfConfig":"18"},{"size":2205,"mtime":1610360456980,"results":"27","hashOfConfig":"18"},{"size":3756,"mtime":1610468745268,"results":"28","hashOfConfig":"18"},{"size":3847,"mtime":1610468745271,"results":"29","hashOfConfig":"18"},{"size":4471,"mtime":1610468745275,"results":"30","hashOfConfig":"18"},{"size":2329,"mtime":1610470459891,"results":"31","hashOfConfig":"18"},{"size":1970,"mtime":1610472920803,"results":"32","hashOfConfig":"18"},{"size":320,"mtime":1610472258483,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cfsf2j",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\index.js",[],"C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Helpers\\session.js",[],["71","72"],"C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\App.js",[],"C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\reportWebVitals.js",[],"C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Components\\EnsgSearch.js",[],"C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Components\\Profile.js",["73"],"import { useEffect, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { SessionContext } from \"../Helpers/session\";\r\n\r\nexport default function Profile() {\r\n  const history = useHistory();\r\n  const { session } = useContext(SessionContext);\r\n\r\n  useEffect(() => {\r\n    const getUser = () => {\r\n      fetch(\"http://localhost:4000/profile\", {\r\n        credentials: \"include\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        \"Access-Control-Allow-Origin\": \"http://localhost:4000\",\r\n      })\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          if (res.success === true) {\r\n            console.log(res);\r\n          } else {\r\n            console.log(\"Uuups - No user found\");\r\n            history.push(\"/\");\r\n          }\r\n        })\r\n        .catch((err) => console.log(err));\r\n    };\r\n    getUser();\r\n  }, []);\r\n\r\n  if (Object.keys(session).length !== 0) {\r\n    return (\r\n      <div style={{ margin: \"20px\" }}>\r\n        <p>{`Welcome ${session.name}!`}</p>\r\n        <p>This is your profile page</p>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div>Please login to access your profile</div>;\r\n  }\r\n}\r\n","C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Components\\ProfileManager.js",[],"C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Components\\GdcProjectChoice.js",[],"C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Components\\LoginForm.js",[],"C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Components\\RegisterForm.js",[],"C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Components\\GdcCategoryChoice.js",["74","75"],"import React, { useState, useEffect } from \"react\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport GdcDataTypeChoice from \"./GdcDataTypeChoice\";\r\nimport \"../App.css\";\r\n\r\nexport default function GdcCategoryChoice(props) {\r\n  const [gdcCategories, setGdcCategories] = useState([]);\r\n  const [uniqueCategories, setUniqueCategories] = useState([]);\r\n  const [selectedCategory, setSelectedCategory] = useState([]);\r\n  const [showDataType, setShowDataType] = useState(false);\r\n\r\n  function getGdcCategories() {\r\n    fetch(\"https://api.gdc.cancer.gov/v0/graphql\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        query: `\r\n                query DataCategoryFileCounts($filters: FiltersArgument) {\r\n                        projects {\r\n                          hits(first: 1000, filters: $filters) {\r\n                            edges {\r\n                              node {\r\n                               project_id\r\n                                \r\n                                summary {\r\n                                  data_categories {\r\n                                    data_category\r\n                                    file_count\r\n                                  }\r\n                                }\r\n                              }\r\n                            }\r\n                        }\r\n                    } \r\n                      }`,\r\n        variables: {\r\n          filters: {\r\n            op: \"=\",\r\n            content: { field: \"project_id\", value: props.project },\r\n          },\r\n        },\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        setGdcCategories(res.data.projects.hits.edges);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    getGdcCategories();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    showCategories();\r\n  }, [gdcCategories]);\r\n\r\n  function showCategories() {\r\n    let helperSet = new Set();\r\n    gdcCategories.map((category) =>\r\n      category.node.summary.data_categories.map((subcategory) =>\r\n        helperSet.add(subcategory.data_category)\r\n      )\r\n    );\r\n\r\n    setUniqueCategories(Array.from(helperSet));\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    if (e.target.checked) {\r\n      setSelectedCategory([...selectedCategory, e.target.id]);\r\n    } else {\r\n      setSelectedCategory((prev) =>\r\n        prev.filter((item) => item !== e.target.id)\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedCategory.length !== 0) {\r\n      setShowDataType(true);\r\n    } else {\r\n      setShowDataType(false);\r\n    }\r\n    console.log(selectedCategory);\r\n  }, [selectedCategory]);\r\n\r\n  return (\r\n    <>\r\n      <Col md=\"6\" xl=\"3\">\r\n        <h3>Categories</h3>\r\n        {uniqueCategories ? (\r\n          <fieldset>\r\n            <div className=\"form-group\">\r\n              {uniqueCategories.map((category) => (\r\n                <div key={category} className=\"custom-control custom-checkbox\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    className=\"custom-control-input\"\r\n                    id={category}\r\n                    onChange={handleChange}\r\n                  />\r\n                  <label className=\"custom-control-label\" for={category}>\r\n                    {category}\r\n                  </label>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </fieldset>\r\n        ) : (\r\n          <h1>loading available GDC projects...</h1>\r\n        )}\r\n      </Col>\r\n      <>\r\n        {showDataType && (\r\n          <>\r\n            <GdcDataTypeChoice\r\n              category={selectedCategory}\r\n              project={props.project}\r\n            />\r\n          </>\r\n        )}\r\n      </>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Components\\GdcDataTypeChoice.js",["76","77","78"],"import React, { useState, useEffect } from \"react\";\r\nimport GdcWorkflowChoice from \"./GdcWorkflowChoice\";\r\nimport { Form, Col } from \"react-bootstrap\";\r\nimport \"../App.css\";\r\n\r\nexport default function GdcDataTypeChoice(props) {\r\n  const [gdcDataTypes, setGdcDataTypes] = useState([]);\r\n  const [uniqueDataType, setUniqueDataType] = useState([]);\r\n  const [selectedType, setSelectedType] = useState([]);\r\n  const [showWorkflow, setShowWorkflow] = useState(false);\r\n\r\n  function getGdcDataTypes() {\r\n    fetch(\"https://api.gdc.cancer.gov/v0/graphql\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        query: `\r\n                query DataTypeFileCounts($filters: FiltersArgument) {\r\n                    viewer {\r\n                        repository {\r\n                    files {\r\n                          hits(first: 1000, filters: $filters) {\r\n                            edges {\r\n                              node {\r\n                               file_id\r\n                               data_category\r\n                            data_type\r\n                            \r\n                            }\r\n                        }\r\n                    } }\r\n                   }}\r\n                      }`,\r\n        variables: {\r\n          filters: {\r\n            op: \"and\",\r\n            content: [\r\n              {\r\n                op: \"in\",\r\n                content: {\r\n                  field: \"cases.project.project_id\",\r\n                  value: props.project,\r\n                },\r\n              },\r\n              {\r\n                op: \"in\",\r\n                content: {\r\n                  field: \"data_category\",\r\n                  value: props.category,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        },\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        setGdcDataTypes(res.data.viewer.repository.files.hits.edges);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    getGdcDataTypes();\r\n  }, [props.category]);\r\n\r\n  useEffect(() => {\r\n    showDataTypes();\r\n  }, [gdcDataTypes]);\r\n\r\n  function showDataTypes() {\r\n    let helperSet = new Set();\r\n    gdcDataTypes.map((dataType) => helperSet.add(dataType.node.data_type));\r\n\r\n    setUniqueDataType(Array.from(helperSet));\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    if (e.target.checked) {\r\n      setSelectedType([...selectedType, e.target.id]);\r\n    } else {\r\n      setSelectedType((prev) => prev.filter((item) => item !== e.target.id));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedType.length !== 0) {\r\n      setShowWorkflow(true);\r\n    } else {\r\n      setShowWorkflow(false);\r\n    }\r\n  }, [selectedType]);\r\n\r\n  return (\r\n    <>\r\n      <Col md=\"6\" xl=\"3\">\r\n        <h3>Data Type</h3>\r\n        {uniqueDataType ? (\r\n          <fieldset>\r\n            <div className=\"form-group\">\r\n              {uniqueDataType.map((type) => (\r\n                <div key={type} className=\"custom-control custom-checkbox\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    className=\"custom-control-input\"\r\n                    id={type}\r\n                    onChange={handleChange}\r\n                  />\r\n                  <label className=\"custom-control-label\" for={type}>\r\n                    {type}\r\n                  </label>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </fieldset>\r\n        ) : (\r\n          <h1>loading available GDC projects...</h1>\r\n        )}\r\n      </Col>\r\n      <>\r\n        {showWorkflow && (\r\n          <>\r\n            <GdcWorkflowChoice\r\n              dataType={selectedType}\r\n              category={props.category}\r\n              project={props.project}\r\n            />\r\n          </>\r\n        )}\r\n      </>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Components\\GdcWorkflowChoice.js",["79","80"],"import React, { useState, useEffect } from \"react\";\r\nimport DataFetch from \"./DataFetch\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport \"../App.css\";\r\n\r\nexport default function GdcWorkflowChoice(props) {\r\n  const [gdcWorkflows, setGdcWorkflows] = useState([]);\r\n  const [uniqueWorkflow, setUniqueWorkflow] = useState([]);\r\n  const [selectedWorkflow, setSelectedWorkflow] = useState([]);\r\n  const [startDataFetch, setStartDataFetch] = useState(false);\r\n\r\n  function getGdcWorkflows() {\r\n    fetch(\"https://api.gdc.cancer.gov/v0/graphql\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        query: `\r\n                query WorkflowFileCounts($filters: FiltersArgument) {\r\n                    viewer {\r\n                        repository {\r\n                    files {\r\n                          hits(first: 1000, filters: $filters) {\r\n                            edges {\r\n                              node {\r\n                               file_id\r\n                               data_category\r\n                            data_type\r\n                            analysis{\r\n                                workflow_type\r\n                            }\r\n                            \r\n                            }\r\n                        }\r\n                    } }\r\n                   }}\r\n                      }`,\r\n        variables: {\r\n          filters: {\r\n            op: \"and\",\r\n            content: [\r\n              {\r\n                op: \"in\",\r\n                content: {\r\n                  field: \"cases.project.project_id\",\r\n                  value: props.project,\r\n                },\r\n              },\r\n              {\r\n                op: \"in\",\r\n                content: {\r\n                  field: \"data_category\",\r\n                  value: props.category,\r\n                },\r\n              },\r\n              {\r\n                op: \"in\",\r\n                content: {\r\n                  field: \"data_type\",\r\n                  value: props.dataType,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        },\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        setGdcWorkflows(res.data.viewer.repository.files.hits.edges);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    getGdcWorkflows();\r\n  }, [props.dataType]);\r\n\r\n  useEffect(() => {\r\n    showWorkflows();\r\n  }, [gdcWorkflows]);\r\n\r\n  function showWorkflows() {\r\n    let helperSet = new Set();\r\n    gdcWorkflows.map((workflow) =>\r\n      helperSet.add(workflow.node.analysis.workflow_type)\r\n    );\r\n    setUniqueWorkflow(Array.from(helperSet));\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    if (e.target.checked) {\r\n      setSelectedWorkflow([...selectedWorkflow, e.target.id]);\r\n    } else {\r\n      setSelectedWorkflow((prev) =>\r\n        prev.filter((item) => item !== e.target.id)\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedWorkflow.length !== 0) {\r\n      setStartDataFetch(true);\r\n    } else {\r\n      setStartDataFetch(false);\r\n    }\r\n    console.log(selectedWorkflow);\r\n  }, [selectedWorkflow]);\r\n\r\n  return (\r\n    <>\r\n      <Col md=\"6\" xl=\"3\">\r\n        <h3>Workflow</h3>\r\n        {uniqueWorkflow ? (\r\n          <fieldset>\r\n            <div className=\"form-group\">\r\n              {uniqueWorkflow\r\n                .filter((item) => item && item.length)\r\n                .map((workflow) => (\r\n                  <div\r\n                    key={workflow}\r\n                    className=\"custom-control custom-checkbox\"\r\n                  >\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      className=\"custom-control-input\"\r\n                      id={workflow}\r\n                      onChange={handleChange}\r\n                    />\r\n                    <label className=\"custom-control-label\" for={workflow}>\r\n                      {workflow}\r\n                    </label>\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          </fieldset>\r\n        ) : (\r\n          <h1>loading available GDC workflows...</h1>\r\n        )}\r\n      </Col>\r\n      <div>\r\n        {startDataFetch && (\r\n          <>\r\n            <DataFetch\r\n              dataType={props.dataType}\r\n              workflow={selectedWorkflow}\r\n              category={props.category}\r\n              project={props.project}\r\n            />\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Components\\DataFetch.js",["81","82","83"],"C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Components\\DataDownload.js",["84"],"C:\\Users\\svenja\\wbs\\projects\\final project\\code\\cancer-gene-xx-client\\src\\Helpers\\search.js",[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":30,"column":6,"nodeType":"91","endLine":30,"endColumn":8,"suggestions":"92"},{"ruleId":"89","severity":1,"message":"93","line":55,"column":6,"nodeType":"91","endLine":55,"endColumn":8,"suggestions":"94"},{"ruleId":"89","severity":1,"message":"95","line":59,"column":6,"nodeType":"91","endLine":59,"endColumn":21,"suggestions":"96"},{"ruleId":"97","severity":1,"message":"98","line":3,"column":10,"nodeType":"99","messageId":"100","endLine":3,"endColumn":14},{"ruleId":"89","severity":1,"message":"101","line":68,"column":6,"nodeType":"91","endLine":68,"endColumn":22,"suggestions":"102"},{"ruleId":"89","severity":1,"message":"103","line":72,"column":6,"nodeType":"91","endLine":72,"endColumn":20,"suggestions":"104"},{"ruleId":"89","severity":1,"message":"105","line":78,"column":6,"nodeType":"91","endLine":78,"endColumn":22,"suggestions":"106"},{"ruleId":"89","severity":1,"message":"107","line":82,"column":6,"nodeType":"91","endLine":82,"endColumn":20,"suggestions":"108"},{"ruleId":"97","severity":1,"message":"98","line":3,"column":10,"nodeType":"99","messageId":"100","endLine":3,"endColumn":14},{"ruleId":"89","severity":1,"message":"109","line":78,"column":5,"nodeType":"91","endLine":78,"endColumn":21,"suggestions":"110"},{"ruleId":"89","severity":1,"message":"111","line":82,"column":5,"nodeType":"91","endLine":82,"endColumn":24,"suggestions":"112"},{"ruleId":"89","severity":1,"message":"113","line":60,"column":5,"nodeType":"91","endLine":60,"endColumn":7,"suggestions":"114"},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["117"],"React Hook useEffect has a missing dependency: 'getGdcCategories'. Either include it or remove the dependency array.",["118"],"React Hook useEffect has a missing dependency: 'showCategories'. Either include it or remove the dependency array.",["119"],"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'getGdcDataTypes'. Either include it or remove the dependency array.",["120"],"React Hook useEffect has a missing dependency: 'showDataTypes'. Either include it or remove the dependency array.",["121"],"React Hook useEffect has a missing dependency: 'getGdcWorkflows'. Either include it or remove the dependency array.",["122"],"React Hook useEffect has a missing dependency: 'showWorkflows'. Either include it or remove the dependency array.",["123"],"React Hook useEffect has a missing dependency: 'getDataFetchManifest'. Either include it or remove the dependency array.",["124"],"React Hook useEffect has a missing dependency: 'buildIdArray'. Either include it or remove the dependency array.",["125"],"React Hook useEffect has missing dependencies: 'props.idArray' and 'search'. Either include them or remove the dependency array.",["126"],"no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},"Update the dependencies array to be: [history]",{"range":"147","text":"148"},"Update the dependencies array to be: [getGdcCategories]",{"range":"149","text":"150"},"Update the dependencies array to be: [gdcCategories, showCategories]",{"range":"151","text":"152"},"Update the dependencies array to be: [getGdcDataTypes, props.category]",{"range":"153","text":"154"},"Update the dependencies array to be: [gdcDataTypes, showDataTypes]",{"range":"155","text":"156"},"Update the dependencies array to be: [getGdcWorkflows, props.dataType]",{"range":"157","text":"158"},"Update the dependencies array to be: [gdcWorkflows, showWorkflows]",{"range":"159","text":"160"},"Update the dependencies array to be: [getDataFetchManifest, props.workflow]",{"range":"161","text":"162"},"Update the dependencies array to be: [buildIdArray, dataFetchManifest]",{"range":"163","text":"164"},"Update the dependencies array to be: [props.idArray, search]",{"range":"165","text":"166"},[893,895],"[history]",[1844,1846],"[getGdcCategories]",[1901,1916],"[gdcCategories, showCategories]",[2080,2096],"[getGdcDataTypes, props.category]",[2150,2164],"[gdcDataTypes, showDataTypes]",[2378,2394],"[getGdcWorkflows, props.dataType]",[2448,2462],"[gdcWorkflows, showWorkflows]",[1933,1949],"[getDataFetchManifest, props.workflow]",[1996,2015],"[buildIdArray, dataFetchManifest]",[1791,1793],"[props.idArray, search]"]