[{"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/index.js":"1","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Helpers/session.js":"2","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Helpers/search.js":"3","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/App.js":"4","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/reportWebVitals.js":"5","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/Profile.js":"6","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/ProfileManager.js":"7","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/GdcProjectChoice.js":"8","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/EnsgSearch.js":"9","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/RegisterForm.js":"10","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/LoginForm.js":"11","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/GdcCategoryChoice.js":"12","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/GdcDataTypeChoice.js":"13","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/GdcWorkflowChoice.js":"14","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/DataFetch.js":"15","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/DataDownload.js":"16","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/SaveSearch.js":"17","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/BoxPlot.js":"18","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/Navigation.js":"19"},{"size":821,"mtime":1610525316657,"results":"20","hashOfConfig":"21"},{"size":810,"mtime":1610626064196,"results":"22","hashOfConfig":"21"},{"size":424,"mtime":1610626877151,"results":"23","hashOfConfig":"21"},{"size":1134,"mtime":1610696510134,"results":"24","hashOfConfig":"21"},{"size":362,"mtime":1609156530198,"results":"25","hashOfConfig":"21"},{"size":9067,"mtime":1610703125441,"results":"26","hashOfConfig":"21"},{"size":4623,"mtime":1610697061628,"results":"27","hashOfConfig":"21"},{"size":2504,"mtime":1610632565600,"results":"28","hashOfConfig":"21"},{"size":2015,"mtime":1610632565595,"results":"29","hashOfConfig":"21"},{"size":2262,"mtime":1610626877150,"results":"30","hashOfConfig":"21"},{"size":1955,"mtime":1610626877147,"results":"31","hashOfConfig":"21"},{"size":3196,"mtime":1610632565597,"results":"32","hashOfConfig":"21"},{"size":3711,"mtime":1610468693152,"results":"33","hashOfConfig":"21"},{"size":3646,"mtime":1610632565602,"results":"34","hashOfConfig":"21"},{"size":2584,"mtime":1610632565592,"results":"35","hashOfConfig":"21"},{"size":2177,"mtime":1610632565590,"results":"36","hashOfConfig":"21"},{"size":4290,"mtime":1610626877150,"results":"37","hashOfConfig":"21"},{"size":2125,"mtime":1610632565586,"results":"38","hashOfConfig":"21"},{"size":1211,"mtime":1610702733966,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1eazfj8",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/index.js",[],["85","86"],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Helpers/session.js",[],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Helpers/search.js",[],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/App.js",["87"],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/reportWebVitals.js",[],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/Profile.js",["88","89","90"],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/ProfileManager.js",[],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/GdcProjectChoice.js",[],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/EnsgSearch.js",[],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/RegisterForm.js",[],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/LoginForm.js",[],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/GdcCategoryChoice.js",["91","92"],"import React, { useState, useEffect } from 'react'\nimport { Col } from 'react-bootstrap'\nimport GdcDataTypeChoice from './GdcDataTypeChoice'\nimport '../App.css'\n\nexport default function GdcCategoryChoice(props) {\n\tconst [gdcCategories, setGdcCategories] = useState([])\n\tconst [uniqueCategories, setUniqueCategories] = useState([])\n\tconst [selectedCategory, setSelectedCategory] = useState([])\n\tconst [showDataType, setShowDataType] = useState(false)\n\n\tfunction getGdcCategories() {\n\t\tfetch('https://api.gdc.cancer.gov/v0/graphql', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\tAccept: 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tquery: `\n                query DataCategoryFileCounts($filters: FiltersArgument) {\n                        projects {\n                          hits(first: 1000, filters: $filters) {\n                            edges {\n                              node {\n                               project_id\n                                \n                                summary {\n                                  data_categories {\n                                    data_category\n                                    file_count\n                                  }\n                                }\n                              }\n                            }\n                        }\n                    } \n                      }`,\n\t\t\t\tvariables: {\n\t\t\t\t\tfilters: {\n\t\t\t\t\t\top: '=',\n\t\t\t\t\t\tcontent: { field: 'project_id', value: props.project },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t\t})\n\t\t\t.then((res) => res.json())\n\t\t\t.then((res) => {\n\t\t\t\tsetGdcCategories(res.data.projects.hits.edges)\n\t\t\t})\n\t}\n\n\tuseEffect(() => {\n\t\tgetGdcCategories()\n\t}, [])\n\n\tuseEffect(() => {\n\t\tshowCategories()\n\t}, [gdcCategories])\n\n\tfunction showCategories() {\n\t\tlet helperSet = new Set()\n\t\tgdcCategories.map((category) =>\n\t\t\tcategory.node.summary.data_categories.map((subcategory) =>\n\t\t\t\thelperSet.add(subcategory.data_category)\n\t\t\t)\n\t\t)\n\n\t\tsetUniqueCategories(Array.from(helperSet))\n\t}\n\n\tconst handleChange = (e) => {\n\t\tif (e.target.checked) {\n\t\t\tsetSelectedCategory([...selectedCategory, e.target.id])\n\t\t} else {\n\t\t\tsetSelectedCategory((prev) => prev.filter((item) => item !== e.target.id))\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tif (selectedCategory.length !== 0) {\n\t\t\tsetShowDataType(true)\n\t\t} else {\n\t\t\tsetShowDataType(false)\n\t\t}\n\t}, [selectedCategory])\n\n\treturn (\n\t\t<>\n\t\t\t<Col md='6' xl='3'>\n\t\t\t\t<h3>Categories</h3>\n\t\t\t\t{uniqueCategories ? (\n\t\t\t\t\t<fieldset>\n\t\t\t\t\t\t<div className='form-group'>\n\t\t\t\t\t\t\t{uniqueCategories.map((category) => (\n\t\t\t\t\t\t\t\t<div key={category} className='custom-control custom-checkbox'>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t\tclassName='custom-control-input'\n\t\t\t\t\t\t\t\t\t\tid={category}\n\t\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<label className='custom-control-label' for={category}>\n\t\t\t\t\t\t\t\t\t\t{category}\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</fieldset>\n\t\t\t\t) : (\n\t\t\t\t\t<h1>loading available GDC projects...</h1>\n\t\t\t\t)}\n\t\t\t</Col>\n\t\t\t<>\n\t\t\t\t{showDataType && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<GdcDataTypeChoice\n\t\t\t\t\t\t\tcategory={selectedCategory}\n\t\t\t\t\t\t\tproject={props.project}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</>\n\t\t</>\n\t)\n}\n","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/GdcDataTypeChoice.js",["93","94","95"],"import React, { useState, useEffect } from \"react\";\nimport GdcWorkflowChoice from \"./GdcWorkflowChoice\";\nimport { Form, Col } from \"react-bootstrap\";\nimport \"../App.css\";\n\nexport default function GdcDataTypeChoice(props) {\n  const [gdcDataTypes, setGdcDataTypes] = useState([]);\n  const [uniqueDataType, setUniqueDataType] = useState([]);\n  const [selectedType, setSelectedType] = useState([]);\n  const [showWorkflow, setShowWorkflow] = useState(false);\n\n  function getGdcDataTypes() {\n    fetch(\"https://api.gdc.cancer.gov/v0/graphql\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        query: `\n                query DataTypeFileCounts($filters: FiltersArgument) {\n                    viewer {\n                        repository {\n                    files {\n                          hits(first: 1000, filters: $filters) {\n                            edges {\n                              node {\n                               file_id\n                               data_category\n                            data_type\n                            \n                            }\n                        }\n                    } }\n                   }}\n                      }`,\n        variables: {\n          filters: {\n            op: \"and\",\n            content: [\n              {\n                op: \"in\",\n                content: {\n                  field: \"cases.project.project_id\",\n                  value: props.project,\n                },\n              },\n              {\n                op: \"in\",\n                content: {\n                  field: \"data_category\",\n                  value: props.category,\n                },\n              },\n            ],\n          },\n        },\n      }),\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        setGdcDataTypes(res.data.viewer.repository.files.hits.edges);\n      });\n  }\n\n  useEffect(() => {\n    getGdcDataTypes();\n  }, [props.category]);\n\n  useEffect(() => {\n    showDataTypes();\n  }, [gdcDataTypes]);\n\n  function showDataTypes() {\n    let helperSet = new Set();\n    gdcDataTypes.map((dataType) => helperSet.add(dataType.node.data_type));\n\n    setUniqueDataType(Array.from(helperSet));\n  }\n\n  const handleChange = (e) => {\n    if (e.target.checked) {\n      setSelectedType([...selectedType, e.target.id]);\n    } else {\n      setSelectedType((prev) => prev.filter((item) => item !== e.target.id));\n    }\n  };\n\n  useEffect(() => {\n    if (selectedType.length !== 0) {\n      setShowWorkflow(true);\n    } else {\n      setShowWorkflow(false);\n    }\n  }, [selectedType]);\n\n  return (\n    <>\n      <Col md=\"6\" xl=\"3\">\n        <h3>Data Type</h3>\n        {uniqueDataType ? (\n          <fieldset>\n            <div className=\"form-group\">\n              {uniqueDataType.map((type) => (\n                <div key={type} className=\"custom-control custom-checkbox\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"custom-control-input\"\n                    id={type}\n                    onChange={handleChange}\n                  />\n                  <label className=\"custom-control-label\" for={type}>\n                    {type}\n                  </label>\n                </div>\n              ))}\n            </div>\n          </fieldset>\n        ) : (\n          <h1>loading available GDC projects...</h1>\n        )}\n      </Col>\n      <>\n        {showWorkflow && (\n          <>\n            <GdcWorkflowChoice\n              dataType={selectedType}\n              category={props.category}\n              project={props.project}\n            />\n          </>\n        )}\n      </>\n    </>\n  );\n}\n","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/GdcWorkflowChoice.js",["96","97"],"import React, { useState, useEffect } from 'react'\nimport DataFetch from './DataFetch'\nimport { Col } from 'react-bootstrap'\nimport '../App.css'\n\nexport default function GdcWorkflowChoice(props) {\n\tconst [gdcWorkflows, setGdcWorkflows] = useState([])\n\tconst [uniqueWorkflow, setUniqueWorkflow] = useState([])\n\tconst [selectedWorkflow, setSelectedWorkflow] = useState([])\n\tconst [startDataFetch, setStartDataFetch] = useState(false)\n\n\tfunction getGdcWorkflows() {\n\t\tfetch('https://api.gdc.cancer.gov/v0/graphql', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\tAccept: 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tquery: `\n                query WorkflowFileCounts($filters: FiltersArgument) {\n                    viewer {\n                        repository {\n                    files {\n                          hits(first: 1000, filters: $filters) {\n                            edges {\n                              node {\n                               file_id\n                               data_category\n                            data_type\n                            analysis{\n                                workflow_type\n                            }\n                            \n                            }\n                        }\n                    } }\n                   }}\n                      }`,\n\t\t\t\tvariables: {\n\t\t\t\t\tfilters: {\n\t\t\t\t\t\top: 'and',\n\t\t\t\t\t\tcontent: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\top: 'in',\n\t\t\t\t\t\t\t\tcontent: {\n\t\t\t\t\t\t\t\t\tfield: 'cases.project.project_id',\n\t\t\t\t\t\t\t\t\tvalue: props.project,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\top: 'in',\n\t\t\t\t\t\t\t\tcontent: {\n\t\t\t\t\t\t\t\t\tfield: 'data_category',\n\t\t\t\t\t\t\t\t\tvalue: props.category,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\top: 'in',\n\t\t\t\t\t\t\t\tcontent: {\n\t\t\t\t\t\t\t\t\tfield: 'data_type',\n\t\t\t\t\t\t\t\t\tvalue: props.dataType,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t\t})\n\t\t\t.then((res) => res.json())\n\t\t\t.then((res) => {\n\t\t\t\tsetGdcWorkflows(res.data.viewer.repository.files.hits.edges)\n\t\t\t})\n\t}\n\n\tuseEffect(() => {\n\t\tgetGdcWorkflows()\n\t}, [props.dataType])\n\n\tuseEffect(() => {\n\t\tshowWorkflows()\n\t}, [gdcWorkflows])\n\n\tfunction showWorkflows() {\n\t\tlet helperSet = new Set()\n\t\tgdcWorkflows.map((workflow) =>\n\t\t\thelperSet.add(workflow.node.analysis.workflow_type)\n\t\t)\n\t\tsetUniqueWorkflow(Array.from(helperSet))\n\t}\n\n\tconst handleChange = (e) => {\n\t\tif (e.target.checked) {\n\t\t\tsetSelectedWorkflow([...selectedWorkflow, e.target.id])\n\t\t} else {\n\t\t\tsetSelectedWorkflow((prev) => prev.filter((item) => item !== e.target.id))\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tif (selectedWorkflow.length !== 0) {\n\t\t\tsetStartDataFetch(true)\n\t\t} else {\n\t\t\tsetStartDataFetch(false)\n\t\t}\n\t}, [selectedWorkflow])\n\n\treturn (\n\t\t<>\n\t\t\t<Col md='6' xl='3'>\n\t\t\t\t<h3>Workflow</h3>\n\t\t\t\t{uniqueWorkflow ? (\n\t\t\t\t\t<fieldset>\n\t\t\t\t\t\t<div className='form-group'>\n\t\t\t\t\t\t\t{uniqueWorkflow\n\t\t\t\t\t\t\t\t.filter((item) => item && item.length)\n\t\t\t\t\t\t\t\t.map((workflow) => (\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tkey={workflow}\n\t\t\t\t\t\t\t\t\t\tclassName='custom-control custom-checkbox'\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t\t\tclassName='custom-control-input'\n\t\t\t\t\t\t\t\t\t\t\tid={workflow}\n\t\t\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<label className='custom-control-label' for={workflow}>\n\t\t\t\t\t\t\t\t\t\t\t{workflow}\n\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</fieldset>\n\t\t\t\t) : (\n\t\t\t\t\t<h1>loading available GDC workflows...</h1>\n\t\t\t\t)}\n\t\t\t</Col>\n\t\t\t<div>\n\t\t\t\t{startDataFetch && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<DataFetch\n\t\t\t\t\t\t\tdataType={props.dataType}\n\t\t\t\t\t\t\tworkflow={selectedWorkflow}\n\t\t\t\t\t\t\tcategory={props.category}\n\t\t\t\t\t\t\tproject={props.project}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</>\n\t)\n}\n","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/DataFetch.js",["98","99","100","101","102"],"import React, { useState, useEffect, useContext, useRef } from 'react'\nimport DataDownload from './DataDownload'\nimport { SearchContext } from '../Helpers/search'\nimport { SessionContext } from '../Helpers/session'\nimport '../App.css'\n\nexport default function DataFetch(props) {\n\tconst [dataFetchManifest, setDataFetchManifest] = useState([])\n\tconst [idArray, setIdArray] = useState([])\n\tconst { search, setSearchSummary } = useContext(SearchContext)\n\tconst { session } = useContext(SessionContext)\n\n\tuseEffect(() => {\n\t\t// Eventuell nur speichern, wenn Daten abrufbar\n\t\tsetSearchSummary({\n\t\t\tensg_number: search,\n\t\t\tproject: props.project,\n\t\t\tcategory: props.category,\n\t\t\tdata_type: props.dataType,\n\t\t\tworkflow: props.workflow,\n\t\t})\n\t}, [])\n\n\tfunction getDataFetchManifest() {\n\t\tfetch('https://api.gdc.cancer.gov/v0/graphql', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\tAccept: 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tquery: `\n                query WorkflowFileCounts($filters: FiltersArgument) {\n                    viewer {\n                        repository {\n                    files {\n                          hits(first: 10, filters: $filters) {\n                            edges {\n                              node {\n                               file_id    \n                            }\n                        }\n                    } }\n                   }}\n                      }`,\n\t\t\t\tvariables: {\n\t\t\t\t\tfilters: {\n\t\t\t\t\t\top: 'and',\n\t\t\t\t\t\tcontent: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\top: 'in',\n\t\t\t\t\t\t\t\tcontent: {\n\t\t\t\t\t\t\t\t\tfield: 'cases.project.project_id',\n\t\t\t\t\t\t\t\t\tvalue: props.project,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\top: 'in',\n\t\t\t\t\t\t\t\tcontent: {\n\t\t\t\t\t\t\t\t\tfield: 'data_category',\n\t\t\t\t\t\t\t\t\tvalue: props.category,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\top: 'in',\n\t\t\t\t\t\t\t\tcontent: {\n\t\t\t\t\t\t\t\t\tfield: 'data_type',\n\t\t\t\t\t\t\t\t\tvalue: props.dataType,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\top: 'in',\n\t\t\t\t\t\t\t\tcontent: {\n\t\t\t\t\t\t\t\t\tfield: 'analysis.workflow_type',\n\t\t\t\t\t\t\t\t\tvalue: props.workflow,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t\t})\n\t\t\t.then((res) => res.json())\n\t\t\t.then((res) => {\n\t\t\t\tsetDataFetchManifest(res.data.viewer.repository.files.hits.edges)\n\t\t\t})\n\t}\n\n\tuseEffect(() => {\n\t\tgetDataFetchManifest()\n\t}, [props.workflow])\n\n\tuseEffect(() => {\n\t\tbuildIdArray()\n\t}, [dataFetchManifest])\n\n\tfunction buildIdArray() {\n\t\tlet helperArray = []\n\t\tdataFetchManifest.map((manifest) => helperArray.push(manifest.node.file_id))\n\t\tsetIdArray(helperArray)\n\t}\n\n\treturn <>{idArray.length && <DataDownload idArray={idArray} />}</>\n}\n","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/DataDownload.js",["103","104","105"],"import React, { useEffect, useState, useContext } from 'react'\nimport { Button } from 'react-bootstrap'\n// import download from \"downloadjs\";\nimport untar from 'js-untar'\nimport BoxPlot from './BoxPlot'\nimport { SearchContext } from '../Helpers/search'\n\n// const extract = require(\"extract-zip\");\nconst pako = require('pako')\n\n// fetch everything DONE\n// \"unarchive\" DONE\n// for each unarchived file, ungzip it DONE\n// for each ungzipped file, find the correct line of text, save to object with key=filename, value=value of matching\n\nexport default function App(props) {\n\tconst { search } = useContext(SearchContext)\n\tconst [results, setResults] = useState([])\n\tconst [boxPlotValues, setBoxPlotValues] = useState([])\n\n\tconst unarchive = async function (files) {\n\t\tlet unzippedFiles = []\n\t\tawait untar(files).progress(function (extractedFile) {\n\t\t\tconst newFileOutput = pako.ungzip(extractedFile.buffer, {\n\t\t\t\tto: 'string',\n\t\t\t})\n\t\t\tunzippedFiles.push({ [extractedFile.name]: newFileOutput })\n\t\t})\n\t\treturn unzippedFiles\n\t}\n\n\tuseEffect(() => {\n\t\tfetch('https://api.gdc.cancer.gov/data?tarfile', {\n\t\t\tmethod: 'post',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tids: props.idArray,\n\t\t\t}),\n\t\t})\n\t\t\t.then((r) => r.arrayBuffer())\n\t\t\t.then((r) => unarchive(r))\n\t\t\t.then((files) => {\n\t\t\t\tsetResults(\n\t\t\t\t\tfiles.map((file) => {\n\t\t\t\t\t\tvar fileLines = Object.values(file)[0].split('\\n')\n\t\t\t\t\t\tfor (var i = 0; i < fileLines.length; i++) {\n\t\t\t\t\t\t\tvar y = fileLines[i].split('\\t')\n\t\t\t\t\t\t\tif (y[0].includes(search)) {\n\t\t\t\t\t\t\t\treturn { [Object.keys(file)[0]]: y[1] }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn { [Object.keys(file)[0]]: 'no match' }\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t})\n\t}, [])\n\n\tuseEffect(() => {\n\t\tgetBoxPlotData()\n\t}, [results])\n\n\tfunction getBoxPlotData() {\n\t\tlet helperArray = []\n\t\tresults.map((r) => helperArray.push(Object.values(r)[0]))\n\t\tsetBoxPlotValues(helperArray.map((i) => Number(i)))\n\t}\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t{search}\n\t\t\t{results.map((r) => (\n\t\t\t\t<li key={Object.keys(r)[0]}>\n\t\t\t\t\t{r && Object.keys(r)[0]} {Object.values(r)[0]}\n\t\t\t\t</li>\n\t\t\t))}\n\t\t\t{boxPlotValues.length && <BoxPlot boxPlotValues={boxPlotValues} />}\n\t\t</div>\n\t)\n}\n","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/SaveSearch.js",[],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/BoxPlot.js",["106","107"],"import React, { useEffect } from 'react'\nimport * as d3 from 'd3'\n\nexport default function Boxplot(props) {\n\tfunction buildPlot() {\n\t\tconsole.log(props.boxPlotValues)\n\t\t// set the dimensions and margins of the graph\n\t\tvar margin = { top: 10, right: 30, bottom: 30, left: 40 },\n\t\t\twidth = 400 - margin.left - margin.right,\n\t\t\theight = 400 - margin.top - margin.bottom\n\n\t\t// append the svg object to the body of the page\n\t\tvar svg = d3\n\t\t\t.select('#my_dataviz')\n\t\t\t.append('svg')\n\t\t\t.attr('width', width + margin.left + margin.right)\n\t\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t\t.append('g')\n\t\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n\t\t// create dummy data\n\t\tvar data = props.boxPlotValues\n\n\t\t// Compute summary statistics used for the box:\n\t\tvar data_sorted = data.sort(d3.ascending)\n\t\tvar q1 = d3.quantile(data_sorted, 0.25)\n\t\tvar median = d3.quantile(data_sorted, 0.5)\n\t\tvar q3 = d3.quantile(data_sorted, 0.75)\n\t\tvar interQuantileRange = q3 - q1\n\n\t\tvar min = q1 - 1.5 * interQuantileRange\n\t\tvar max = q1 + 1.5 * interQuantileRange\n\n\t\t// Show the Y scale\n\t\tvar maxScale = Math.max(...data) * 1.1\n\t\tvar y = d3.scaleLinear().domain([0, maxScale]).range([height, 0])\n\t\tsvg.call(d3.axisLeft(y))\n\n\t\t// a few features for the box\n\t\tvar center = 200\n\t\tvar width = 100\n\n\t\t// Show the main vertical line\n\t\tsvg\n\t\t\t.append('line')\n\t\t\t.attr('x1', center)\n\t\t\t.attr('x2', center)\n\t\t\t.attr('y1', y(min))\n\t\t\t.attr('y2', y(max))\n\t\t\t.attr('stroke', 'black')\n\n\t\t// Show the box\n\t\tsvg\n\t\t\t.append('rect')\n\t\t\t.attr('x', center - width / 2)\n\t\t\t.attr('y', y(q3))\n\t\t\t.attr('height', y(q1) - y(q3))\n\t\t\t.attr('width', width)\n\t\t\t.attr('stroke', 'black')\n\t\t\t.style('fill', '#69b3a2')\n\n\t\t// show median, min and max horizontal lines\n\t\tsvg\n\t\t\t.selectAll('toto')\n\t\t\t.data([min, median, max])\n\t\t\t.enter()\n\t\t\t.append('line')\n\t\t\t.attr('x1', center - width / 2)\n\t\t\t.attr('x2', center + width / 2)\n\t\t\t.attr('y1', function (d) {\n\t\t\t\treturn y(d)\n\t\t\t})\n\t\t\t.attr('y2', function (d) {\n\t\t\t\treturn y(d)\n\t\t\t})\n\t\t\t.attr('stroke', 'black')\n\t}\n\n\tuseEffect(() => {\n\t\tbuildPlot()\n\t}, [])\n\n\treturn <div id='my_dataviz'></div>\n}\n","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/Navigation.js",["108"],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":7,"column":8,"nodeType":"115","messageId":"116","endLine":7,"endColumn":22},{"ruleId":"117","severity":1,"message":"118","line":36,"column":6,"nodeType":"119","endLine":36,"endColumn":8,"suggestions":"120"},{"ruleId":"117","severity":1,"message":"121","line":55,"column":6,"nodeType":"119","endLine":55,"endColumn":8,"suggestions":"122"},{"ruleId":"123","severity":1,"message":"124","line":169,"column":17,"nodeType":"125","endLine":172,"endColumn":18},{"ruleId":"117","severity":1,"message":"126","line":55,"column":5,"nodeType":"119","endLine":55,"endColumn":7,"suggestions":"127"},{"ruleId":"117","severity":1,"message":"128","line":59,"column":5,"nodeType":"119","endLine":59,"endColumn":20,"suggestions":"129"},{"ruleId":"113","severity":1,"message":"130","line":3,"column":10,"nodeType":"115","messageId":"116","endLine":3,"endColumn":14},{"ruleId":"117","severity":1,"message":"131","line":68,"column":6,"nodeType":"119","endLine":68,"endColumn":22,"suggestions":"132"},{"ruleId":"117","severity":1,"message":"133","line":72,"column":6,"nodeType":"119","endLine":72,"endColumn":20,"suggestions":"134"},{"ruleId":"117","severity":1,"message":"135","line":78,"column":5,"nodeType":"119","endLine":78,"endColumn":21,"suggestions":"136"},{"ruleId":"117","severity":1,"message":"137","line":82,"column":5,"nodeType":"119","endLine":82,"endColumn":19,"suggestions":"138"},{"ruleId":"113","severity":1,"message":"139","line":1,"column":50,"nodeType":"115","messageId":"116","endLine":1,"endColumn":56},{"ruleId":"113","severity":1,"message":"140","line":11,"column":10,"nodeType":"115","messageId":"116","endLine":11,"endColumn":17},{"ruleId":"117","severity":1,"message":"141","line":22,"column":5,"nodeType":"119","endLine":22,"endColumn":7,"suggestions":"142"},{"ruleId":"117","severity":1,"message":"143","line":91,"column":5,"nodeType":"119","endLine":91,"endColumn":21,"suggestions":"144"},{"ruleId":"117","severity":1,"message":"145","line":95,"column":5,"nodeType":"119","endLine":95,"endColumn":24,"suggestions":"146"},{"ruleId":"113","severity":1,"message":"147","line":2,"column":10,"nodeType":"115","messageId":"116","endLine":2,"endColumn":16},{"ruleId":"117","severity":1,"message":"148","line":58,"column":5,"nodeType":"119","endLine":58,"endColumn":7,"suggestions":"149"},{"ruleId":"117","severity":1,"message":"150","line":62,"column":5,"nodeType":"119","endLine":62,"endColumn":14,"suggestions":"151"},{"ruleId":"152","severity":1,"message":"153","line":41,"column":7,"nodeType":"115","messageId":"154","endLine":41,"endColumn":12},{"ruleId":"117","severity":1,"message":"155","line":81,"column":5,"nodeType":"119","endLine":81,"endColumn":7,"suggestions":"156"},{"ruleId":"123","severity":1,"message":"124","line":35,"column":13,"nodeType":"125","endLine":35,"endColumn":46},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"no-unused-vars","'ProfileManager' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["159"],"React Hook useEffect has a missing dependency: 'session.userID'. Either include it or remove the dependency array.",["160"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has a missing dependency: 'getGdcCategories'. Either include it or remove the dependency array.",["161"],"React Hook useEffect has a missing dependency: 'showCategories'. Either include it or remove the dependency array.",["162"],"'Form' is defined but never used.","React Hook useEffect has a missing dependency: 'getGdcDataTypes'. Either include it or remove the dependency array.",["163"],"React Hook useEffect has a missing dependency: 'showDataTypes'. Either include it or remove the dependency array.",["164"],"React Hook useEffect has a missing dependency: 'getGdcWorkflows'. Either include it or remove the dependency array.",["165"],"React Hook useEffect has a missing dependency: 'showWorkflows'. Either include it or remove the dependency array.",["166"],"'useRef' is defined but never used.","'session' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.category', 'props.dataType', 'props.project', 'props.workflow', 'search', and 'setSearchSummary'. Either include them or remove the dependency array.",["167"],"React Hook useEffect has a missing dependency: 'getDataFetchManifest'. Either include it or remove the dependency array.",["168"],"React Hook useEffect has a missing dependency: 'buildIdArray'. Either include it or remove the dependency array.",["169"],"'Button' is defined but never used.","React Hook useEffect has missing dependencies: 'props.idArray' and 'search'. Either include them or remove the dependency array.",["170"],"React Hook useEffect has a missing dependency: 'getBoxPlotData'. Either include it or remove the dependency array.",["171"],"no-redeclare","'width' is already defined.","redeclared","React Hook useEffect has a missing dependency: 'buildPlot'. Either include it or remove the dependency array.",["172"],"no-global-assign","no-unsafe-negation",{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},"Update the dependencies array to be: [history]",{"range":"201","text":"202"},"Update the dependencies array to be: [session.userID]",{"range":"203","text":"204"},"Update the dependencies array to be: [getGdcCategories]",{"range":"205","text":"206"},"Update the dependencies array to be: [gdcCategories, showCategories]",{"range":"207","text":"208"},"Update the dependencies array to be: [getGdcDataTypes, props.category]",{"range":"209","text":"210"},"Update the dependencies array to be: [gdcDataTypes, showDataTypes]",{"range":"211","text":"212"},"Update the dependencies array to be: [getGdcWorkflows, props.dataType]",{"range":"213","text":"214"},"Update the dependencies array to be: [gdcWorkflows, showWorkflows]",{"range":"215","text":"216"},"Update the dependencies array to be: [props.category, props.dataType, props.project, props.workflow, search, setSearchSummary]",{"range":"217","text":"218"},"Update the dependencies array to be: [getDataFetchManifest, props.workflow]",{"range":"219","text":"220"},"Update the dependencies array to be: [buildIdArray, dataFetchManifest]",{"range":"221","text":"222"},"Update the dependencies array to be: [props.idArray, search]",{"range":"223","text":"224"},"Update the dependencies array to be: [getBoxPlotData, results]",{"range":"225","text":"226"},"Update the dependencies array to be: [buildPlot]",{"range":"227","text":"228"},[1152,1154],"[history]",[1685,1687],"[session.userID]",[1695,1697],"[getGdcCategories]",[1742,1757],"[gdcCategories, showCategories]",[2013,2029],"[getGdcDataTypes, props.category]",[2079,2093],"[gdcDataTypes, showDataTypes]",[2032,2048],"[getGdcWorkflows, props.dataType]",[2092,2106],"[gdcWorkflows, showWorkflows]",[738,740],"[props.category, props.dataType, props.project, props.workflow, search, setSearchSummary]",[2274,2290],"[getDataFetchManifest, props.workflow]",[2333,2352],"[buildIdArray, dataFetchManifest]",[1690,1692],"[props.idArray, search]",[1737,1746],"[getBoxPlotData, results]",[2082,2084],"[buildPlot]"]