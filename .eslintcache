[{"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/index.js":"1","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Helpers/session.js":"2","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Helpers/search.js":"3","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/App.js":"4","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/reportWebVitals.js":"5","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/Profile.js":"6","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/ProfileManager.js":"7","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/GdcProjectChoice.js":"8","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/EnsgSearch.js":"9","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/RegisterForm.js":"10","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/LoginForm.js":"11","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/GdcCategoryChoice.js":"12","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/GdcDataTypeChoice.js":"13","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/GdcWorkflowChoice.js":"14","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/DataFetch.js":"15","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/DataDownload.js":"16","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/SaveSearch.js":"17"},{"size":821,"mtime":1610525316657,"results":"18","hashOfConfig":"19"},{"size":810,"mtime":1610626064196,"results":"20","hashOfConfig":"19"},{"size":424,"mtime":1610547220626,"results":"21","hashOfConfig":"19"},{"size":1088,"mtime":1610551849625,"results":"22","hashOfConfig":"19"},{"size":362,"mtime":1609156530198,"results":"23","hashOfConfig":"19"},{"size":1151,"mtime":1610626116717,"results":"24","hashOfConfig":"19"},{"size":3412,"mtime":1610562278127,"results":"25","hashOfConfig":"19"},{"size":2927,"mtime":1610468693153,"results":"26","hashOfConfig":"19"},{"size":2075,"mtime":1610525316653,"results":"27","hashOfConfig":"19"},{"size":2262,"mtime":1610609792079,"results":"28","hashOfConfig":"19"},{"size":1955,"mtime":1610609822857,"results":"29","hashOfConfig":"19"},{"size":3627,"mtime":1610468693151,"results":"30","hashOfConfig":"19"},{"size":3711,"mtime":1610468693152,"results":"31","hashOfConfig":"19"},{"size":4315,"mtime":1610533163416,"results":"32","hashOfConfig":"19"},{"size":3058,"mtime":1610612823635,"results":"33","hashOfConfig":"19"},{"size":2056,"mtime":1610625635558,"results":"34","hashOfConfig":"19"},{"size":4290,"mtime":1610626058844,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1eazfj8",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/index.js",[],["74","75"],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Helpers/session.js",[],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Helpers/search.js",[],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/App.js",[],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/reportWebVitals.js",[],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/Profile.js",["76"],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/ProfileManager.js",[],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/GdcProjectChoice.js",[],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/EnsgSearch.js",[],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/RegisterForm.js",[],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/LoginForm.js",[],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/GdcCategoryChoice.js",["77","78"],"import React, { useState, useEffect } from \"react\";\nimport { Col } from \"react-bootstrap\";\nimport GdcDataTypeChoice from \"./GdcDataTypeChoice\";\nimport \"../App.css\";\n\nexport default function GdcCategoryChoice(props) {\n  const [gdcCategories, setGdcCategories] = useState([]);\n  const [uniqueCategories, setUniqueCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState([]);\n  const [showDataType, setShowDataType] = useState(false);\n\n  function getGdcCategories() {\n    fetch(\"https://api.gdc.cancer.gov/v0/graphql\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        query: `\n                query DataCategoryFileCounts($filters: FiltersArgument) {\n                        projects {\n                          hits(first: 1000, filters: $filters) {\n                            edges {\n                              node {\n                               project_id\n                                \n                                summary {\n                                  data_categories {\n                                    data_category\n                                    file_count\n                                  }\n                                }\n                              }\n                            }\n                        }\n                    } \n                      }`,\n        variables: {\n          filters: {\n            op: \"=\",\n            content: { field: \"project_id\", value: props.project },\n          },\n        },\n      }),\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        setGdcCategories(res.data.projects.hits.edges);\n      });\n  }\n\n  useEffect(() => {\n    getGdcCategories();\n  }, []);\n\n  useEffect(() => {\n    showCategories();\n  }, [gdcCategories]);\n\n  function showCategories() {\n    let helperSet = new Set();\n    gdcCategories.map((category) =>\n      category.node.summary.data_categories.map((subcategory) =>\n        helperSet.add(subcategory.data_category)\n      )\n    );\n\n    setUniqueCategories(Array.from(helperSet));\n  }\n\n  const handleChange = (e) => {\n    if (e.target.checked) {\n      setSelectedCategory([...selectedCategory, e.target.id]);\n    } else {\n      setSelectedCategory((prev) =>\n        prev.filter((item) => item !== e.target.id)\n      );\n    }\n  };\n\n  useEffect(() => {\n    if (selectedCategory.length !== 0) {\n      setShowDataType(true);\n    } else {\n      setShowDataType(false);\n    }\n    console.log(selectedCategory);\n  }, [selectedCategory]);\n\n  return (\n    <>\n      <Col md=\"6\" xl=\"3\">\n        <h3>Categories</h3>\n        {uniqueCategories ? (\n          <fieldset>\n            <div className=\"form-group\">\n              {uniqueCategories.map((category) => (\n                <div key={category} className=\"custom-control custom-checkbox\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"custom-control-input\"\n                    id={category}\n                    onChange={handleChange}\n                  />\n                  <label className=\"custom-control-label\" for={category}>\n                    {category}\n                  </label>\n                </div>\n              ))}\n            </div>\n          </fieldset>\n        ) : (\n          <h1>loading available GDC projects...</h1>\n        )}\n      </Col>\n      <>\n        {showDataType && (\n          <>\n            <GdcDataTypeChoice\n              category={selectedCategory}\n              project={props.project}\n            />\n          </>\n        )}\n      </>\n    </>\n  );\n}\n","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/GdcDataTypeChoice.js",["79","80","81"],"import React, { useState, useEffect } from \"react\";\nimport GdcWorkflowChoice from \"./GdcWorkflowChoice\";\nimport { Form, Col } from \"react-bootstrap\";\nimport \"../App.css\";\n\nexport default function GdcDataTypeChoice(props) {\n  const [gdcDataTypes, setGdcDataTypes] = useState([]);\n  const [uniqueDataType, setUniqueDataType] = useState([]);\n  const [selectedType, setSelectedType] = useState([]);\n  const [showWorkflow, setShowWorkflow] = useState(false);\n\n  function getGdcDataTypes() {\n    fetch(\"https://api.gdc.cancer.gov/v0/graphql\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        query: `\n                query DataTypeFileCounts($filters: FiltersArgument) {\n                    viewer {\n                        repository {\n                    files {\n                          hits(first: 1000, filters: $filters) {\n                            edges {\n                              node {\n                               file_id\n                               data_category\n                            data_type\n                            \n                            }\n                        }\n                    } }\n                   }}\n                      }`,\n        variables: {\n          filters: {\n            op: \"and\",\n            content: [\n              {\n                op: \"in\",\n                content: {\n                  field: \"cases.project.project_id\",\n                  value: props.project,\n                },\n              },\n              {\n                op: \"in\",\n                content: {\n                  field: \"data_category\",\n                  value: props.category,\n                },\n              },\n            ],\n          },\n        },\n      }),\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        setGdcDataTypes(res.data.viewer.repository.files.hits.edges);\n      });\n  }\n\n  useEffect(() => {\n    getGdcDataTypes();\n  }, [props.category]);\n\n  useEffect(() => {\n    showDataTypes();\n  }, [gdcDataTypes]);\n\n  function showDataTypes() {\n    let helperSet = new Set();\n    gdcDataTypes.map((dataType) => helperSet.add(dataType.node.data_type));\n\n    setUniqueDataType(Array.from(helperSet));\n  }\n\n  const handleChange = (e) => {\n    if (e.target.checked) {\n      setSelectedType([...selectedType, e.target.id]);\n    } else {\n      setSelectedType((prev) => prev.filter((item) => item !== e.target.id));\n    }\n  };\n\n  useEffect(() => {\n    if (selectedType.length !== 0) {\n      setShowWorkflow(true);\n    } else {\n      setShowWorkflow(false);\n    }\n  }, [selectedType]);\n\n  return (\n    <>\n      <Col md=\"6\" xl=\"3\">\n        <h3>Data Type</h3>\n        {uniqueDataType ? (\n          <fieldset>\n            <div className=\"form-group\">\n              {uniqueDataType.map((type) => (\n                <div key={type} className=\"custom-control custom-checkbox\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"custom-control-input\"\n                    id={type}\n                    onChange={handleChange}\n                  />\n                  <label className=\"custom-control-label\" for={type}>\n                    {type}\n                  </label>\n                </div>\n              ))}\n            </div>\n          </fieldset>\n        ) : (\n          <h1>loading available GDC projects...</h1>\n        )}\n      </Col>\n      <>\n        {showWorkflow && (\n          <>\n            <GdcWorkflowChoice\n              dataType={selectedType}\n              category={props.category}\n              project={props.project}\n            />\n          </>\n        )}\n      </>\n    </>\n  );\n}\n","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/GdcWorkflowChoice.js",["82","83"],"import React, { useState, useEffect } from \"react\";\nimport DataFetch from \"./DataFetch\";\nimport { Col } from \"react-bootstrap\";\nimport \"../App.css\";\n\nexport default function GdcWorkflowChoice(props) {\n  const [gdcWorkflows, setGdcWorkflows] = useState([]);\n  const [uniqueWorkflow, setUniqueWorkflow] = useState([]);\n  const [selectedWorkflow, setSelectedWorkflow] = useState([]);\n  const [startDataFetch, setStartDataFetch] = useState(false);\n\n  function getGdcWorkflows() {\n    fetch(\"https://api.gdc.cancer.gov/v0/graphql\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        query: `\n                query WorkflowFileCounts($filters: FiltersArgument) {\n                    viewer {\n                        repository {\n                    files {\n                          hits(first: 1000, filters: $filters) {\n                            edges {\n                              node {\n                               file_id\n                               data_category\n                            data_type\n                            analysis{\n                                workflow_type\n                            }\n                            \n                            }\n                        }\n                    } }\n                   }}\n                      }`,\n        variables: {\n          filters: {\n            op: \"and\",\n            content: [\n              {\n                op: \"in\",\n                content: {\n                  field: \"cases.project.project_id\",\n                  value: props.project,\n                },\n              },\n              {\n                op: \"in\",\n                content: {\n                  field: \"data_category\",\n                  value: props.category,\n                },\n              },\n              {\n                op: \"in\",\n                content: {\n                  field: \"data_type\",\n                  value: props.dataType,\n                },\n              },\n            ],\n          },\n        },\n      }),\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        setGdcWorkflows(res.data.viewer.repository.files.hits.edges);\n      });\n  }\n\n  useEffect(() => {\n    getGdcWorkflows();\n  }, [props.dataType]);\n\n  useEffect(() => {\n    showWorkflows();\n  }, [gdcWorkflows]);\n\n  function showWorkflows() {\n    let helperSet = new Set();\n    gdcWorkflows.map((workflow) =>\n      helperSet.add(workflow.node.analysis.workflow_type)\n    );\n    setUniqueWorkflow(Array.from(helperSet));\n  }\n\n  const handleChange = (e) => {\n    if (e.target.checked) {\n      setSelectedWorkflow([...selectedWorkflow, e.target.id]);\n    } else {\n      setSelectedWorkflow((prev) =>\n        prev.filter((item) => item !== e.target.id)\n      );\n    }\n  };\n\n  useEffect(() => {\n    if (selectedWorkflow.length !== 0) {\n      setStartDataFetch(true);\n    } else {\n      setStartDataFetch(false);\n    }\n    console.log(selectedWorkflow);\n  }, [selectedWorkflow]);\n\n  return (\n    <>\n      <Col md=\"6\" xl=\"3\">\n        <h3>Workflow</h3>\n        {uniqueWorkflow ? (\n          <fieldset>\n            <div className=\"form-group\">\n              {uniqueWorkflow\n                .filter((item) => item && item.length)\n                .map((workflow) => (\n                  <div\n                    key={workflow}\n                    className=\"custom-control custom-checkbox\"\n                  >\n                    <input\n                      type=\"checkbox\"\n                      className=\"custom-control-input\"\n                      id={workflow}\n                      onChange={handleChange}\n                    />\n                    <label className=\"custom-control-label\" for={workflow}>\n                      {workflow}\n                    </label>\n                  </div>\n                ))}\n            </div>\n          </fieldset>\n        ) : (\n          <h1>loading available GDC workflows...</h1>\n        )}\n      </Col>\n      <div>\n        {startDataFetch && (\n          <>\n            <DataFetch\n              dataType={props.dataType}\n              workflow={selectedWorkflow}\n              category={props.category}\n              project={props.project}\n            />\n          </>\n        )}\n      </div>\n    </>\n  );\n}\n","/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/DataFetch.js",["84","85","86","87","88"],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/DataDownload.js",["89","90"],"/Users/anacaballero/Desktop/wbs/FinalProject/cancer-gene-xx-client/src/Components/SaveSearch.js",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":30,"column":6,"nodeType":"97","endLine":30,"endColumn":8,"suggestions":"98"},{"ruleId":"95","severity":1,"message":"99","line":55,"column":6,"nodeType":"97","endLine":55,"endColumn":8,"suggestions":"100"},{"ruleId":"95","severity":1,"message":"101","line":59,"column":6,"nodeType":"97","endLine":59,"endColumn":21,"suggestions":"102"},{"ruleId":"103","severity":1,"message":"104","line":3,"column":10,"nodeType":"105","messageId":"106","endLine":3,"endColumn":14},{"ruleId":"95","severity":1,"message":"107","line":68,"column":6,"nodeType":"97","endLine":68,"endColumn":22,"suggestions":"108"},{"ruleId":"95","severity":1,"message":"109","line":72,"column":6,"nodeType":"97","endLine":72,"endColumn":20,"suggestions":"110"},{"ruleId":"95","severity":1,"message":"111","line":78,"column":6,"nodeType":"97","endLine":78,"endColumn":22,"suggestions":"112"},{"ruleId":"95","severity":1,"message":"113","line":82,"column":6,"nodeType":"97","endLine":82,"endColumn":20,"suggestions":"114"},{"ruleId":"103","severity":1,"message":"115","line":1,"column":50,"nodeType":"105","messageId":"106","endLine":1,"endColumn":56},{"ruleId":"103","severity":1,"message":"116","line":11,"column":11,"nodeType":"105","messageId":"106","endLine":11,"endColumn":18},{"ruleId":"95","severity":1,"message":"117","line":22,"column":6,"nodeType":"97","endLine":22,"endColumn":8,"suggestions":"118"},{"ruleId":"95","severity":1,"message":"119","line":91,"column":6,"nodeType":"97","endLine":91,"endColumn":22,"suggestions":"120"},{"ruleId":"95","severity":1,"message":"121","line":95,"column":6,"nodeType":"97","endLine":95,"endColumn":25,"suggestions":"122"},{"ruleId":"103","severity":1,"message":"123","line":2,"column":10,"nodeType":"105","messageId":"106","endLine":2,"endColumn":16},{"ruleId":"95","severity":1,"message":"124","line":59,"column":6,"nodeType":"97","endLine":59,"endColumn":8,"suggestions":"125"},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["128"],"React Hook useEffect has a missing dependency: 'getGdcCategories'. Either include it or remove the dependency array.",["129"],"React Hook useEffect has a missing dependency: 'showCategories'. Either include it or remove the dependency array.",["130"],"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'getGdcDataTypes'. Either include it or remove the dependency array.",["131"],"React Hook useEffect has a missing dependency: 'showDataTypes'. Either include it or remove the dependency array.",["132"],"React Hook useEffect has a missing dependency: 'getGdcWorkflows'. Either include it or remove the dependency array.",["133"],"React Hook useEffect has a missing dependency: 'showWorkflows'. Either include it or remove the dependency array.",["134"],"'useRef' is defined but never used.","'session' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.category', 'props.dataType', 'props.project', 'props.workflow', 'search', and 'setSearchSummary'. Either include them or remove the dependency array.",["135"],"React Hook useEffect has a missing dependency: 'getDataFetchManifest'. Either include it or remove the dependency array.",["136"],"React Hook useEffect has a missing dependency: 'buildIdArray'. Either include it or remove the dependency array.",["137"],"'Button' is defined but never used.","React Hook useEffect has missing dependencies: 'props.idArray' and 'search'. Either include them or remove the dependency array.",["138"],"no-global-assign","no-unsafe-negation",{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},"Update the dependencies array to be: [history]",{"range":"161","text":"162"},"Update the dependencies array to be: [getGdcCategories]",{"range":"163","text":"164"},"Update the dependencies array to be: [gdcCategories, showCategories]",{"range":"165","text":"166"},"Update the dependencies array to be: [getGdcDataTypes, props.category]",{"range":"167","text":"168"},"Update the dependencies array to be: [gdcDataTypes, showDataTypes]",{"range":"169","text":"170"},"Update the dependencies array to be: [getGdcWorkflows, props.dataType]",{"range":"171","text":"172"},"Update the dependencies array to be: [gdcWorkflows, showWorkflows]",{"range":"173","text":"174"},"Update the dependencies array to be: [props.category, props.dataType, props.project, props.workflow, search, setSearchSummary]",{"range":"175","text":"176"},"Update the dependencies array to be: [getDataFetchManifest, props.workflow]",{"range":"177","text":"178"},"Update the dependencies array to be: [buildIdArray, dataFetchManifest]",{"range":"179","text":"180"},"Update the dependencies array to be: [props.idArray, search]",{"range":"181","text":"182"},[864,866],"[history]",[1790,1792],"[getGdcCategories]",[1843,1858],"[gdcCategories, showCategories]",[2013,2029],"[getGdcDataTypes, props.category]",[2079,2093],"[gdcDataTypes, showDataTypes]",[2301,2317],"[getGdcWorkflows, props.dataType]",[2367,2381],"[gdcWorkflows, showWorkflows]",[775,777],"[props.category, props.dataType, props.project, props.workflow, search, setSearchSummary]",[2625,2641],"[getDataFetchManifest, props.workflow]",[2690,2709],"[buildIdArray, dataFetchManifest]",[1847,1849],"[props.idArray, search]"]